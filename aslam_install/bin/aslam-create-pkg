#!/usr/bin/env python
from __future__ import print_function
import os;
import re;
import sys;
import aslam_install_util as aiu
from argparse import ArgumentParser, RawDescriptionHelpFormatter
import argparse_config
colored = aiu.colored
import re
import aslam_install_util.aslam_package as apack
configFile = os.path.expanduser('~/.aslam-create-pkg')


def isGoodPackageName(strg, search=re.compile('^[a-z0-9_]+$').search):
    return bool(search(strg))

def isGoodVersionNumber(strg, search=re.compile('^[0-9]+\.[0-9]+\.[0-9]+$').search):
    return bool(search(strg))

usage="""

This utility creates a new catkin package and configures 
it based on your arguments"""

parser = ArgumentParser(description=usage,formatter_class=RawDescriptionHelpFormatter)

parser.add_argument("package", nargs=1, help="Package to be created.")
parser.add_argument('--version', dest='version', help='The package version. This must have the format major.minor.revision, where these are numbers (like 1.2.3).', default='0.0.1')
parser.add_argument('--buildtool-depends', dest='buildtooldeps', nargs='+', default=['catkin','catkin_simple'])
parser.add_argument('--depends', dest='deps', nargs='+', default=['eigen_catkin'], help="A list of catkin package dependencies.")
parser.add_argument('--maintainer-email', dest='memail', default='you@mavt.ethz.ch', help="The maintainer email.")
parser.add_argument('--maintainer-name', dest='mname', default='Maintainer Name', help="The maintainer name.")
parser.add_argument('--save', dest='saveOptions', action='store_true', help='Save current options to the configuration file (%s) [EXPERIMENTAL FEATURE].' % (configFile))

options = parser.parse_args()

argparse_config.read_config_file(parser, configFile)
options = parser.parse_args()

#uniquify all lists in options
for k, o in options.__dict__.iteritems(): 
    if isinstance(o, list):
        s = set([])
        out = []
        for item in o :
            if item not in s : out.append(item); s.add(item);
        options.__dict__[k] = out;

if options.saveOptions:
    options.saveOptions = False;
    f = open(configFile, "w")
    text = argparse_config.generate_config(parser, options, section='default', only_non_defaults=True);
    f.write(text)
    f.close()
    print("Wrote the following into %s :\n" % configFile , text)
    sys.exit(0);



package = options.package[0]

if not isGoodPackageName(package):
   print("Cowardly refusing to create a package with an illegal name \"{0}\"".format(package))
   print("Packages should have only lower-case letters, numbers, and underscores.")
   sys.exit(1)

if not isGoodVersionNumber(options.version):
    print("Cowardly refusing to create a package with an illegal version number \"{0}\"".format(options.version))
    print("Version numbers must be \"major.minor.revision\"")
    sys.exit(1)

if os.path.exists(package):
    print("Cowardly refusing to create the package when the directory \"{0}\" exists".format(package))
    #exit(1)
else:
    print("-- Making the package directory")
    os.mkdir(package)
    os.mkdir(os.path.join(package,'include'))
    os.mkdir(os.path.join(package,'src'))
print("-- Creating package xml")

depstring = ''
for dep in options.buildtooldeps:
    depstring += '  <buildtool_depend>{0}</buildtool_depend>\n'.format(dep)
depstring += '\n'
for dep in options.deps:
    depstring += '  <depend>{0}</depend>\n'.format(dep)

with open(os.path.join(package,'package.xml'), 'w') as outfile:
    print(apack.package_xml.format(package, options.version, options.memail, options.mname, depstring), file=outfile)

print("-- Creating CMakeLists.txt")
with open(os.path.join(package,'CMakeLists.txt'), 'w') as outfile:
    print(apack.cmakelists.format(package), file=outfile)

# \todo PTF: python exports.
