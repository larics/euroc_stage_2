#! /usr/bin/env python

PACKAGE="visensor_node"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# ========================= ALL CAMERAS ==========================
#       Name       Type      Level Description     Default Min   Max
gen.add("cam_agc_enable",       bool_t,    0,    "automatic gain control", True)
gen.add("cam_max_analog_gain",       double_t,    0,    "max analog gain", 4,     1, 4)
gen.add("cam_global_analog_gain",       double_t,    0,    "analog gain", 1,     1, 4)
gen.add("cam_global_analog_gain_attenuation",       bool_t,    0,    "gain attenuation", False)
gen.add("cam_aec_enable",       bool_t,    0,    "automatic exposure control", True)
gen.add("cam_min_coarse_shutter_width",       double_t,    0,    "min shutter width in ms", 0.06768,     0.06768, 32.0)
gen.add("cam_max_coarse_shutter_width",       double_t,    0,    "max shutter width in ms", 16.92,     0.06768, 32.0)
gen.add("cam_coarse_shutter_width",       double_t,    0,    "shutter width in ms", 16.2432,     0.06768, 32.0)

# ========================= strobe ==========================

gen.add("strobe",       int_t,    0,    "strobe", 0,     0, 1000)
# Max. without active cooling
# gen.add("strobe",       int_t,    0,    "strobe", 0,     0, 1000)

gen.add("strobe_mode",       bool_t,    0,    "flashing led", True)

# ========================= Dense Matcher ==========================
gen.add("penalty_1",       int_t,    0,    " ", 2,     0, 32000)
gen.add("penalty_2",       int_t,    0,    " ", 60,     0, 32000)
gen.add("threshold",       int_t,    0,    " ", 255,     0, 32000)
gen.add("lr_check",       int_t,    0,    " ", 5,     0, 32000)

# ========================= External Trigger ==========================
gen.add("enable_trigger_0",       bool_t,    0,    "Enable first trigger line", False)
gen.add("enable_trigger_1",       bool_t,    0,    "Enable sedond trigger line", False)
gen.add("enable_trigger_2",       bool_t,    0,    "Enable third trigger line", False)

direction_enum = gen.enum([ gen.const("Output",      bool_t, False, "Set trigger direction to output"),
	gen.const("Input",     bool_t, True, "Set trigger direction to input")], "An enum to choose direction")


gen.add("trigger_0_direction",       bool_t,    0,    "Sets trigger direction.", True, edit_method=direction_enum)
gen.add("trigger_1_direction",       bool_t,    0,    "Sets trigger direction.", True, edit_method=direction_enum)
gen.add("trigger_2_direction",       bool_t,    0,    "Sets trigger direction.", True, edit_method=direction_enum)

gen.add("trigger_0_rate",       int_t,    0,    "Rate of trigger line in Hz ", 0, 0, 1000)
gen.add("trigger_1_rate",       int_t,    0,    "Rate of trigger line in Hz ", 0, 0, 1000)
gen.add("trigger_2_rate",       int_t,    0,    "Rate of trigger line in Hz ", 0, 0, 1000)

gen.add("trigger_0_offset",       int_t,    0,    "Offset of trigger line in 10 microseconds steps", 0, 0, 100000)
gen.add("trigger_1_offset",       int_t,    0,    "Offset of trigger line in 10 microseconds steps", 0, 0, 100000)
gen.add("trigger_2_offset",       int_t,    0,    "Offset of trigger line in 10 microseconds steps", 0, 0, 100000)

exit(gen.generate(PACKAGE, "visensor_node", "Driver"))

